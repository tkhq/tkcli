// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1InvitationParams v1 invitation params
//
// swagger:model v1InvitationParams
type V1InvitationParams struct {

	// access type
	// Required: true
	AccessType *Immutableactivityv1AccessType `json:"accessType"`

	// @inject_tag: validate:"required,email"
	//
	// The email address of the intended Invitation recipient.
	// Required: true
	ReceiverUserEmail *string `json:"receiverUserEmail"`

	// @inject_tag: validate:"required,max=40"
	//
	// The name of the intended Invitation recipient.
	// Required: true
	ReceiverUserName *string `json:"receiverUserName"`

	// @inject_tag: validate:"dive,uuid"
	//
	// A list of tags assigned to the Invitation recipient.
	// Required: true
	ReceiverUserTags []string `json:"receiverUserTags"`

	// @inject_tag: validate:"required,uuid"
	//
	// Unique identifier for the Sender of an Invitation.
	// Required: true
	SenderUserID *string `json:"senderUserId"`
}

// Validate validates this v1 invitation params
func (m *V1InvitationParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceiverUserEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceiverUserName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceiverUserTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSenderUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1InvitationParams) validateAccessType(formats strfmt.Registry) error {

	if err := validate.Required("accessType", "body", m.AccessType); err != nil {
		return err
	}

	if err := validate.Required("accessType", "body", m.AccessType); err != nil {
		return err
	}

	if m.AccessType != nil {
		if err := m.AccessType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accessType")
			}
			return err
		}
	}

	return nil
}

func (m *V1InvitationParams) validateReceiverUserEmail(formats strfmt.Registry) error {

	if err := validate.Required("receiverUserEmail", "body", m.ReceiverUserEmail); err != nil {
		return err
	}

	return nil
}

func (m *V1InvitationParams) validateReceiverUserName(formats strfmt.Registry) error {

	if err := validate.Required("receiverUserName", "body", m.ReceiverUserName); err != nil {
		return err
	}

	return nil
}

func (m *V1InvitationParams) validateReceiverUserTags(formats strfmt.Registry) error {

	if err := validate.Required("receiverUserTags", "body", m.ReceiverUserTags); err != nil {
		return err
	}

	return nil
}

func (m *V1InvitationParams) validateSenderUserID(formats strfmt.Registry) error {

	if err := validate.Required("senderUserId", "body", m.SenderUserID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v1 invitation params based on the context it is used
func (m *V1InvitationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccessType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1InvitationParams) contextValidateAccessType(ctx context.Context, formats strfmt.Registry) error {

	if m.AccessType != nil {
		if err := m.AccessType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accessType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1InvitationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1InvitationParams) UnmarshalBinary(b []byte) error {
	var res V1InvitationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
