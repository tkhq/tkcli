// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Immutableactivityv1Operator immutableactivityv1 operator
//
// swagger:model immutableactivityv1Operator
type Immutableactivityv1Operator string

func NewImmutableactivityv1Operator(value Immutableactivityv1Operator) *Immutableactivityv1Operator {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Immutableactivityv1Operator.
func (m Immutableactivityv1Operator) Pointer() *Immutableactivityv1Operator {
	return &m
}

const (

	// Immutableactivityv1OperatorOPERATOREQUAL captures enum value "OPERATOR_EQUAL"
	Immutableactivityv1OperatorOPERATOREQUAL Immutableactivityv1Operator = "OPERATOR_EQUAL"

	// Immutableactivityv1OperatorOPERATORMORETHAN captures enum value "OPERATOR_MORE_THAN"
	Immutableactivityv1OperatorOPERATORMORETHAN Immutableactivityv1Operator = "OPERATOR_MORE_THAN"

	// Immutableactivityv1OperatorOPERATORMORETHANOREQUAL captures enum value "OPERATOR_MORE_THAN_OR_EQUAL"
	Immutableactivityv1OperatorOPERATORMORETHANOREQUAL Immutableactivityv1Operator = "OPERATOR_MORE_THAN_OR_EQUAL"

	// Immutableactivityv1OperatorOPERATORLESSTHAN captures enum value "OPERATOR_LESS_THAN"
	Immutableactivityv1OperatorOPERATORLESSTHAN Immutableactivityv1Operator = "OPERATOR_LESS_THAN"

	// Immutableactivityv1OperatorOPERATORLESSTHANOREQUAL captures enum value "OPERATOR_LESS_THAN_OR_EQUAL"
	Immutableactivityv1OperatorOPERATORLESSTHANOREQUAL Immutableactivityv1Operator = "OPERATOR_LESS_THAN_OR_EQUAL"

	// Immutableactivityv1OperatorOPERATORCONTAINS captures enum value "OPERATOR_CONTAINS"
	Immutableactivityv1OperatorOPERATORCONTAINS Immutableactivityv1Operator = "OPERATOR_CONTAINS"

	// Immutableactivityv1OperatorOPERATORNOTEQUAL captures enum value "OPERATOR_NOT_EQUAL"
	Immutableactivityv1OperatorOPERATORNOTEQUAL Immutableactivityv1Operator = "OPERATOR_NOT_EQUAL"

	// Immutableactivityv1OperatorOPERATORIN captures enum value "OPERATOR_IN"
	Immutableactivityv1OperatorOPERATORIN Immutableactivityv1Operator = "OPERATOR_IN"

	// Immutableactivityv1OperatorOPERATORNOTIN captures enum value "OPERATOR_NOT_IN"
	Immutableactivityv1OperatorOPERATORNOTIN Immutableactivityv1Operator = "OPERATOR_NOT_IN"

	// Immutableactivityv1OperatorOPERATORCONTAINSONE captures enum value "OPERATOR_CONTAINS_ONE"
	Immutableactivityv1OperatorOPERATORCONTAINSONE Immutableactivityv1Operator = "OPERATOR_CONTAINS_ONE"

	// Immutableactivityv1OperatorOPERATORCONTAINSALL captures enum value "OPERATOR_CONTAINS_ALL"
	Immutableactivityv1OperatorOPERATORCONTAINSALL Immutableactivityv1Operator = "OPERATOR_CONTAINS_ALL"
)

// for schema
var immutableactivityv1OperatorEnum []interface{}

func init() {
	var res []Immutableactivityv1Operator
	if err := json.Unmarshal([]byte(`["OPERATOR_EQUAL","OPERATOR_MORE_THAN","OPERATOR_MORE_THAN_OR_EQUAL","OPERATOR_LESS_THAN","OPERATOR_LESS_THAN_OR_EQUAL","OPERATOR_CONTAINS","OPERATOR_NOT_EQUAL","OPERATOR_IN","OPERATOR_NOT_IN","OPERATOR_CONTAINS_ONE","OPERATOR_CONTAINS_ALL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		immutableactivityv1OperatorEnum = append(immutableactivityv1OperatorEnum, v)
	}
}

func (m Immutableactivityv1Operator) validateImmutableactivityv1OperatorEnum(path, location string, value Immutableactivityv1Operator) error {
	if err := validate.EnumCase(path, location, value, immutableactivityv1OperatorEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this immutableactivityv1 operator
func (m Immutableactivityv1Operator) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateImmutableactivityv1OperatorEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this immutableactivityv1 operator based on context it is used
func (m Immutableactivityv1Operator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
