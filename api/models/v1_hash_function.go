// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1HashFunction  - HASH_FUNCTION_UNSPECIFIED: Default value if hash function is not set explicitly
//   - HASH_FUNCTION_NO_OP: No-op function. Useful if you want to pass raw bytes to sign
//   - HASH_FUNCTION_SHA256: Standard SHA-256
//   - HASH_FUNCTION_KECCAK256: Keccak-256 (not the same as NIST SHA-3!).
//
// This is the hash function used in the Ethereum ecosystem.
//
// swagger:model v1HashFunction
type V1HashFunction string

func NewV1HashFunction(value V1HashFunction) *V1HashFunction {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1HashFunction.
func (m V1HashFunction) Pointer() *V1HashFunction {
	return &m
}

const (

	// V1HashFunctionHASHFUNCTIONNOOP captures enum value "HASH_FUNCTION_NO_OP"
	V1HashFunctionHASHFUNCTIONNOOP V1HashFunction = "HASH_FUNCTION_NO_OP"

	// V1HashFunctionHASHFUNCTIONSHA256 captures enum value "HASH_FUNCTION_SHA256"
	V1HashFunctionHASHFUNCTIONSHA256 V1HashFunction = "HASH_FUNCTION_SHA256"

	// V1HashFunctionHASHFUNCTIONKECCAK256 captures enum value "HASH_FUNCTION_KECCAK256"
	V1HashFunctionHASHFUNCTIONKECCAK256 V1HashFunction = "HASH_FUNCTION_KECCAK256"
)

// for schema
var v1HashFunctionEnum []interface{}

func init() {
	var res []V1HashFunction
	if err := json.Unmarshal([]byte(`["HASH_FUNCTION_NO_OP","HASH_FUNCTION_SHA256","HASH_FUNCTION_KECCAK256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1HashFunctionEnum = append(v1HashFunctionEnum, v)
	}
}

func (m V1HashFunction) validateV1HashFunctionEnum(path, location string, value V1HashFunction) error {
	if err := validate.EnumCase(path, location, value, v1HashFunctionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 hash function
func (m V1HashFunction) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1HashFunctionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 hash function based on context it is used
func (m V1HashFunction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
