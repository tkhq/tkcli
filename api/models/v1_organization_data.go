// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1OrganizationData This proto definition is used in our external-facing APIs.
// It's important to leverage annotations because they're used in our external interfaces.
//
// swagger:model v1OrganizationData
type V1OrganizationData struct {

	// deleted Api keys
	DeletedAPIKeys []*V1APIKey `json:"deletedApiKeys"`

	// deleted authenticators
	DeletedAuthenticators []*V1Authenticator `json:"deletedAuthenticators"`

	// deleted invitations
	DeletedInvitations []*V1Invitation `json:"deletedInvitations"`

	// deleted policies
	DeletedPolicies []*V1Policy `json:"deletedPolicies"`

	// deleted tags
	DeletedTags []*Datav1Tag `json:"deletedTags"`

	// deleted users
	DeletedUsers []*V1User `json:"deletedUsers"`

	// disabled private keys
	DisabledPrivateKeys []*V1PrivateKey `json:"disabledPrivateKeys"`

	// invitations
	Invitations []*V1Invitation `json:"invitations"`

	// name
	Name string `json:"name,omitempty"`

	// organization Id
	OrganizationID string `json:"organizationId,omitempty"`

	// policies
	Policies []*V1Policy `json:"policies"`

	// private keys
	PrivateKeys []*V1PrivateKey `json:"privateKeys"`

	// tags
	Tags []*Datav1Tag `json:"tags"`

	// users
	Users []*V1User `json:"users"`
}

// Validate validates this v1 organization data
func (m *V1OrganizationData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeletedAPIKeys(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeletedAuthenticators(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeletedInvitations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeletedPolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeletedTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeletedUsers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisabledPrivateKeys(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvitations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateKeys(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1OrganizationData) validateDeletedAPIKeys(formats strfmt.Registry) error {
	if swag.IsZero(m.DeletedAPIKeys) { // not required
		return nil
	}

	for i := 0; i < len(m.DeletedAPIKeys); i++ {
		if swag.IsZero(m.DeletedAPIKeys[i]) { // not required
			continue
		}

		if m.DeletedAPIKeys[i] != nil {
			if err := m.DeletedAPIKeys[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deletedApiKeys" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deletedApiKeys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1OrganizationData) validateDeletedAuthenticators(formats strfmt.Registry) error {
	if swag.IsZero(m.DeletedAuthenticators) { // not required
		return nil
	}

	for i := 0; i < len(m.DeletedAuthenticators); i++ {
		if swag.IsZero(m.DeletedAuthenticators[i]) { // not required
			continue
		}

		if m.DeletedAuthenticators[i] != nil {
			if err := m.DeletedAuthenticators[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deletedAuthenticators" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deletedAuthenticators" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1OrganizationData) validateDeletedInvitations(formats strfmt.Registry) error {
	if swag.IsZero(m.DeletedInvitations) { // not required
		return nil
	}

	for i := 0; i < len(m.DeletedInvitations); i++ {
		if swag.IsZero(m.DeletedInvitations[i]) { // not required
			continue
		}

		if m.DeletedInvitations[i] != nil {
			if err := m.DeletedInvitations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deletedInvitations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deletedInvitations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1OrganizationData) validateDeletedPolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.DeletedPolicies) { // not required
		return nil
	}

	for i := 0; i < len(m.DeletedPolicies); i++ {
		if swag.IsZero(m.DeletedPolicies[i]) { // not required
			continue
		}

		if m.DeletedPolicies[i] != nil {
			if err := m.DeletedPolicies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deletedPolicies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deletedPolicies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1OrganizationData) validateDeletedTags(formats strfmt.Registry) error {
	if swag.IsZero(m.DeletedTags) { // not required
		return nil
	}

	for i := 0; i < len(m.DeletedTags); i++ {
		if swag.IsZero(m.DeletedTags[i]) { // not required
			continue
		}

		if m.DeletedTags[i] != nil {
			if err := m.DeletedTags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deletedTags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deletedTags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1OrganizationData) validateDeletedUsers(formats strfmt.Registry) error {
	if swag.IsZero(m.DeletedUsers) { // not required
		return nil
	}

	for i := 0; i < len(m.DeletedUsers); i++ {
		if swag.IsZero(m.DeletedUsers[i]) { // not required
			continue
		}

		if m.DeletedUsers[i] != nil {
			if err := m.DeletedUsers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deletedUsers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deletedUsers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1OrganizationData) validateDisabledPrivateKeys(formats strfmt.Registry) error {
	if swag.IsZero(m.DisabledPrivateKeys) { // not required
		return nil
	}

	for i := 0; i < len(m.DisabledPrivateKeys); i++ {
		if swag.IsZero(m.DisabledPrivateKeys[i]) { // not required
			continue
		}

		if m.DisabledPrivateKeys[i] != nil {
			if err := m.DisabledPrivateKeys[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("disabledPrivateKeys" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("disabledPrivateKeys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1OrganizationData) validateInvitations(formats strfmt.Registry) error {
	if swag.IsZero(m.Invitations) { // not required
		return nil
	}

	for i := 0; i < len(m.Invitations); i++ {
		if swag.IsZero(m.Invitations[i]) { // not required
			continue
		}

		if m.Invitations[i] != nil {
			if err := m.Invitations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("invitations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("invitations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1OrganizationData) validatePolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.Policies) { // not required
		return nil
	}

	for i := 0; i < len(m.Policies); i++ {
		if swag.IsZero(m.Policies[i]) { // not required
			continue
		}

		if m.Policies[i] != nil {
			if err := m.Policies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("policies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1OrganizationData) validatePrivateKeys(formats strfmt.Registry) error {
	if swag.IsZero(m.PrivateKeys) { // not required
		return nil
	}

	for i := 0; i < len(m.PrivateKeys); i++ {
		if swag.IsZero(m.PrivateKeys[i]) { // not required
			continue
		}

		if m.PrivateKeys[i] != nil {
			if err := m.PrivateKeys[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("privateKeys" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("privateKeys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1OrganizationData) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1OrganizationData) validateUsers(formats strfmt.Registry) error {
	if swag.IsZero(m.Users) { // not required
		return nil
	}

	for i := 0; i < len(m.Users); i++ {
		if swag.IsZero(m.Users[i]) { // not required
			continue
		}

		if m.Users[i] != nil {
			if err := m.Users[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v1 organization data based on the context it is used
func (m *V1OrganizationData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeletedAPIKeys(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeletedAuthenticators(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeletedInvitations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeletedPolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeletedTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeletedUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisabledPrivateKeys(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInvitations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrivateKeys(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1OrganizationData) contextValidateDeletedAPIKeys(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DeletedAPIKeys); i++ {

		if m.DeletedAPIKeys[i] != nil {
			if err := m.DeletedAPIKeys[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deletedApiKeys" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deletedApiKeys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1OrganizationData) contextValidateDeletedAuthenticators(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DeletedAuthenticators); i++ {

		if m.DeletedAuthenticators[i] != nil {
			if err := m.DeletedAuthenticators[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deletedAuthenticators" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deletedAuthenticators" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1OrganizationData) contextValidateDeletedInvitations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DeletedInvitations); i++ {

		if m.DeletedInvitations[i] != nil {
			if err := m.DeletedInvitations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deletedInvitations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deletedInvitations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1OrganizationData) contextValidateDeletedPolicies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DeletedPolicies); i++ {

		if m.DeletedPolicies[i] != nil {
			if err := m.DeletedPolicies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deletedPolicies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deletedPolicies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1OrganizationData) contextValidateDeletedTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DeletedTags); i++ {

		if m.DeletedTags[i] != nil {
			if err := m.DeletedTags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deletedTags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deletedTags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1OrganizationData) contextValidateDeletedUsers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DeletedUsers); i++ {

		if m.DeletedUsers[i] != nil {
			if err := m.DeletedUsers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deletedUsers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deletedUsers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1OrganizationData) contextValidateDisabledPrivateKeys(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DisabledPrivateKeys); i++ {

		if m.DisabledPrivateKeys[i] != nil {
			if err := m.DisabledPrivateKeys[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("disabledPrivateKeys" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("disabledPrivateKeys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1OrganizationData) contextValidateInvitations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Invitations); i++ {

		if m.Invitations[i] != nil {
			if err := m.Invitations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("invitations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("invitations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1OrganizationData) contextValidatePolicies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Policies); i++ {

		if m.Policies[i] != nil {
			if err := m.Policies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("policies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1OrganizationData) contextValidatePrivateKeys(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PrivateKeys); i++ {

		if m.PrivateKeys[i] != nil {
			if err := m.PrivateKeys[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("privateKeys" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("privateKeys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1OrganizationData) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tags); i++ {

		if m.Tags[i] != nil {
			if err := m.Tags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1OrganizationData) contextValidateUsers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Users); i++ {

		if m.Users[i] != nil {
			if err := m.Users[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1OrganizationData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1OrganizationData) UnmarshalBinary(b []byte) error {
	var res V1OrganizationData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
