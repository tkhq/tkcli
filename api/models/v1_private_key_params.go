// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1PrivateKeyParams v1 private key params
//
// swagger:model v1PrivateKeyParams
type V1PrivateKeyParams struct {

	// @inject_tag: validate:"required"
	//
	// Cryptocurrency-specific formats for a derived address (e.g., Ethereum).
	// Required: true
	AddressFormats []Immutableactivityv1AddressFormat `json:"addressFormats"`

	// curve
	// Required: true
	Curve *Immutableactivityv1Curve `json:"curve"`

	// @inject_tag: validate:"required,max=40"
	//
	// Human-readable name for a Private Key.
	// Required: true
	PrivateKeyName *string `json:"privateKeyName"`

	// @inject_tag: validate:"dive,uuid"
	//
	// A list of Private Key Tag IDs.
	// Required: true
	PrivateKeyTags []string `json:"privateKeyTags"`
}

// Validate validates this v1 private key params
func (m *V1PrivateKeyParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddressFormats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurve(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateKeyName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateKeyTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1PrivateKeyParams) validateAddressFormats(formats strfmt.Registry) error {

	if err := validate.Required("addressFormats", "body", m.AddressFormats); err != nil {
		return err
	}

	for i := 0; i < len(m.AddressFormats); i++ {

		if err := m.AddressFormats[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addressFormats" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addressFormats" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *V1PrivateKeyParams) validateCurve(formats strfmt.Registry) error {

	if err := validate.Required("curve", "body", m.Curve); err != nil {
		return err
	}

	if err := validate.Required("curve", "body", m.Curve); err != nil {
		return err
	}

	if m.Curve != nil {
		if err := m.Curve.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("curve")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("curve")
			}
			return err
		}
	}

	return nil
}

func (m *V1PrivateKeyParams) validatePrivateKeyName(formats strfmt.Registry) error {

	if err := validate.Required("privateKeyName", "body", m.PrivateKeyName); err != nil {
		return err
	}

	return nil
}

func (m *V1PrivateKeyParams) validatePrivateKeyTags(formats strfmt.Registry) error {

	if err := validate.Required("privateKeyTags", "body", m.PrivateKeyTags); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v1 private key params based on the context it is used
func (m *V1PrivateKeyParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddressFormats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCurve(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1PrivateKeyParams) contextValidateAddressFormats(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AddressFormats); i++ {

		if err := m.AddressFormats[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addressFormats" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addressFormats" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *V1PrivateKeyParams) contextValidateCurve(ctx context.Context, formats strfmt.Registry) error {

	if m.Curve != nil {
		if err := m.Curve.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("curve")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("curve")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1PrivateKeyParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1PrivateKeyParams) UnmarshalBinary(b []byte) error {
	var res V1PrivateKeyParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
