// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1PayloadEncoding - PAYLOAD_ENCODING_UNSPECIFIED: Default value if payload encoding is not set explicitly
//   - PAYLOAD_ENCODING_HEXADECIMAL: Payload is encoded in hexadecimal
//
// We accept 0x-prefixed or non-0x prefixed payloads.
// We accept any casing (uppercase, lowercase, or mixed)
//   - PAYLOAD_ENCODING_TEXT_UTF8: Payload is encoded as utf-8 text
//
// Will be converted to bytes for signature with Rust's standard String.as_bytes()
//
// swagger:model v1PayloadEncoding
type V1PayloadEncoding string

func NewV1PayloadEncoding(value V1PayloadEncoding) *V1PayloadEncoding {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1PayloadEncoding.
func (m V1PayloadEncoding) Pointer() *V1PayloadEncoding {
	return &m
}

const (

	// V1PayloadEncodingPAYLOADENCODINGHEXADECIMAL captures enum value "PAYLOAD_ENCODING_HEXADECIMAL"
	V1PayloadEncodingPAYLOADENCODINGHEXADECIMAL V1PayloadEncoding = "PAYLOAD_ENCODING_HEXADECIMAL"

	// V1PayloadEncodingPAYLOADENCODINGTEXTUTF8 captures enum value "PAYLOAD_ENCODING_TEXT_UTF8"
	V1PayloadEncodingPAYLOADENCODINGTEXTUTF8 V1PayloadEncoding = "PAYLOAD_ENCODING_TEXT_UTF8"
)

// for schema
var v1PayloadEncodingEnum []interface{}

func init() {
	var res []V1PayloadEncoding
	if err := json.Unmarshal([]byte(`["PAYLOAD_ENCODING_HEXADECIMAL","PAYLOAD_ENCODING_TEXT_UTF8"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1PayloadEncodingEnum = append(v1PayloadEncodingEnum, v)
	}
}

func (m V1PayloadEncoding) validateV1PayloadEncodingEnum(path, location string, value V1PayloadEncoding) error {
	if err := validate.EnumCase(path, location, value, v1PayloadEncodingEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 payload encoding
func (m V1PayloadEncoding) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1PayloadEncodingEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 payload encoding based on context it is used
func (m V1PayloadEncoding) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
