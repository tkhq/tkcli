// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1GetActivitiesRequest v1 get activities request
//
// swagger:model v1GetActivitiesRequest
type V1GetActivitiesRequest struct {

	// Array of Activity Statuses filtering which Activities will be listed in the response.
	FilterByStatus []V1ActivityStatus `json:"filterByStatus"`

	// Unique identifier for a given Organization.
	// Required: true
	OrganizationID *string `json:"organizationId"`
}

// Validate validates this v1 get activities request
func (m *V1GetActivitiesRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilterByStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1GetActivitiesRequest) validateFilterByStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.FilterByStatus) { // not required
		return nil
	}

	for i := 0; i < len(m.FilterByStatus); i++ {

		if err := m.FilterByStatus[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filterByStatus" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filterByStatus" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *V1GetActivitiesRequest) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("organizationId", "body", m.OrganizationID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v1 get activities request based on the context it is used
func (m *V1GetActivitiesRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFilterByStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1GetActivitiesRequest) contextValidateFilterByStatus(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FilterByStatus); i++ {

		if err := m.FilterByStatus[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filterByStatus" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filterByStatus" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1GetActivitiesRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1GetActivitiesRequest) UnmarshalBinary(b []byte) error {
	var res V1GetActivitiesRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
