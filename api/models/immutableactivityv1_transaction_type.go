// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Immutableactivityv1TransactionType - TRANSACTION_TYPE_ETHEREUM: Unsigned Ethereum transaction, RLP-encoded and hex-encoded
//
// swagger:model immutableactivityv1TransactionType
type Immutableactivityv1TransactionType string

func NewImmutableactivityv1TransactionType(value Immutableactivityv1TransactionType) *Immutableactivityv1TransactionType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Immutableactivityv1TransactionType.
func (m Immutableactivityv1TransactionType) Pointer() *Immutableactivityv1TransactionType {
	return &m
}

const (

	// Immutableactivityv1TransactionTypeTRANSACTIONTYPEETHEREUM captures enum value "TRANSACTION_TYPE_ETHEREUM"
	Immutableactivityv1TransactionTypeTRANSACTIONTYPEETHEREUM Immutableactivityv1TransactionType = "TRANSACTION_TYPE_ETHEREUM"
)

// for schema
var immutableactivityv1TransactionTypeEnum []interface{}

func init() {
	var res []Immutableactivityv1TransactionType
	if err := json.Unmarshal([]byte(`["TRANSACTION_TYPE_ETHEREUM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		immutableactivityv1TransactionTypeEnum = append(immutableactivityv1TransactionTypeEnum, v)
	}
}

func (m Immutableactivityv1TransactionType) validateImmutableactivityv1TransactionTypeEnum(path, location string, value Immutableactivityv1TransactionType) error {
	if err := validate.EnumCase(path, location, value, immutableactivityv1TransactionTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this immutableactivityv1 transaction type
func (m Immutableactivityv1TransactionType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateImmutableactivityv1TransactionTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this immutableactivityv1 transaction type based on context it is used
func (m Immutableactivityv1TransactionType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
