// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Immutableactivityv1Curve Cryptographic Curve used to generate a given Private Key.
//
// swagger:model immutableactivityv1Curve
type Immutableactivityv1Curve string

func NewImmutableactivityv1Curve(value Immutableactivityv1Curve) *Immutableactivityv1Curve {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Immutableactivityv1Curve.
func (m Immutableactivityv1Curve) Pointer() *Immutableactivityv1Curve {
	return &m
}

const (

	// Immutableactivityv1CurveCURVESECP256K1 captures enum value "CURVE_SECP256K1"
	Immutableactivityv1CurveCURVESECP256K1 Immutableactivityv1Curve = "CURVE_SECP256K1"
)

// for schema
var immutableactivityv1CurveEnum []interface{}

func init() {
	var res []Immutableactivityv1Curve
	if err := json.Unmarshal([]byte(`["CURVE_SECP256K1"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		immutableactivityv1CurveEnum = append(immutableactivityv1CurveEnum, v)
	}
}

func (m Immutableactivityv1Curve) validateImmutableactivityv1CurveEnum(path, location string, value Immutableactivityv1Curve) error {
	if err := validate.EnumCase(path, location, value, immutableactivityv1CurveEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this immutableactivityv1 curve
func (m Immutableactivityv1Curve) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateImmutableactivityv1CurveEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this immutableactivityv1 curve based on context it is used
func (m Immutableactivityv1Curve) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
